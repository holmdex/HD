name: Market Weather Update

on:
  schedule:
    - cron: '0 */2 * * *'  # Run every 2 hours
  workflow_dispatch:        # Manual trigger option

# Ensure only one workflow runs at a time
concurrency:
  group: market-weather
  cancel-in-progress: true

jobs:
  update-market-weather:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      issues: write  # Needed for creating issues on failure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.2.1'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            gcc \
            g++ \
            gfortran \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev \
            libglpk-dev \
            libgit2-dev \
            pandoc \
            cmake
          
          # Verify GCC installation
          gcc --version
          g++ --version

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: '3.1.1'

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: '1.4.549'
          tinytex: true

      - name: Create cache directories
        run: |
          mkdir -p data/cache
          mkdir -p data/backup
          echo "Created data directories"

      - name: Verify required files
        id: verify-files
        run: |
          required_files=("market-weather.qmd" "market-weather-functions.R" "market-weather.css")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "::error::Required file $file not found"
              exit 1
            fi
            echo "✓ Found $file"
          done

      - name: Install R packages
        id: install-packages
        shell: Rscript {0}
        run: |
          options(repos = c(CRAN = "https://cloud.r-project.org"))
          required_packages <- c(
            'tidyverse',   # For data manipulation
            'quantmod',    # For Yahoo Finance
            'rvest',       # For web scraping
            'httr',        # For HTTP requests
            'jsonlite',    # For JSON parsing
            'lubridate',   # For date handling
            'DT',          # For interactive tables
            'scales'       # For formatting
          )
          
          # More robust package installation
          install_if_missing <- function(packages) {
            for(pkg in packages) {
              if(!require(pkg, character.only = TRUE, quietly = TRUE)) {
                message(sprintf("Installing %s...", pkg))
                install.packages(pkg, dependencies = TRUE)
                if(!require(pkg, character.only = TRUE)) {
                  stop(sprintf("Failed to install %s", pkg))
                }
              }
              message(sprintf("✓ Successfully loaded %s", pkg))
            }
          }
          
          tryCatch({
            install_if_missing(required_packages)
          }, error = function(e) {
            message("Error installing packages: ", e$message)
            quit(status = 1)
          })

      - name: Verify R packages
        id: verify-packages
        shell: Rscript {0}
        run: |
          required_packages <- c(
            'tidyverse', 'quantmod', 'rvest', 'httr', 
            'jsonlite', 'lubridate', 'DT', 'scales', 'dplyr', 
            'readr', 'ggplot2', 'tidyr'
          )
          
          # Verify each package can be loaded
          failed_packages <- character(0)
          for(pkg in required_packages) {
            tryCatch({
              library(pkg, character.only = TRUE)
              message(sprintf("✓ Verified %s", pkg))
            }, error = function(e) {
              failed_packages <<- c(failed_packages, pkg)
              message(sprintf("✗ Failed to load %s: %s", pkg, e$message))
            })
          }
          
          if(length(failed_packages
