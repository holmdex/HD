name: Market Weather Diagnostic Workflow

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '.github/workflows/diagnostic-market-weather.yml'
      - 'market-weather-functions.R'
      - 'market-weather-indices.R'
      - 'market-weather.qmd'
      - 'market-weather.css'

jobs:
  comprehensive-diagnosis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.2'

      - name: Set up R Package Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ hashFiles('**/DESCRIPTION') }}
          restore-keys: ${{ runner.os }}-r-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfreetype6-dev \
            libpng-dev \
            libmagick++-dev \
            pandoc

      - name: Install R Packages
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          R -e "
          # Advanced package installation with multiple strategies
          install_robust <- function(packages) {
            # List of package repositories to try
            repos <- c(
              'https://cloud.r-project.org',  # CRAN primary
              'https://packagemanager.posit.co/cran/__linux__/jammy/latest',  # Posit package manager
              'https://cran.rstudio.com/'  # RStudio mirror
            )
            
            # Packages that might need special handling
            special_packages <- c('tidyverse')
            
            # Function to install individual package with multiple attempts
            install_package <- function(pkg) {
              # Attempt 1: Standard installation
              for (repo in repos) {
                tryCatch({
                  if (pkg %in% special_packages) {
                    # For complex packages like tidyverse, use more comprehensive installation
                    install.packages(pkg, repos = repo, dependencies = c('Depends', 'Imports', 'LinkingTo'), type = 'binary')
                  } else {
                    install.packages(pkg, repos = repo, dependencies = TRUE, type = 'binary')
                  }
                  
                  # Verify installation
                  if (requireNamespace(pkg, quietly = TRUE)) {
                    cat(sprintf('Successfully installed %s from %s\n', pkg, repo))
                    return(TRUE)
                  }
                }, error = function(e) {
                  cat(sprintf('Error installing %s from %s: %s\n', pkg, repo, e$message))
                  NULL
                })
              }
              
              # If all repos fail
              cat(sprintf('CRITICAL: Failed to install %s after multiple attempts\n', pkg))
              FALSE
            }
            
            # Track installation results
            installation_results <- sapply(packages, install_package)
            
            # Throw error if any package failed
            if (any(installation_results == FALSE)) {
              failed_packages <- packages[installation_results == FALSE]
              cat('Failed to install the following packages:\n')
              cat(failed_packages, sep = '\n')
              quit(status = 1)
            }
            
            TRUE
          }

          # List of packages to install
          packages_to_install <- c(
            'tidyverse',   # Data manipulation ecosystem
            'quantmod',    # Financial data
            'rvest',       # Web scraping
            'httr',        # HTTP requests
            'jsonlite',    # JSON parsing
            'lubridate',   # Date manipulation
            'DT',          # Interactive tables
            'scales'       # Scaling and formatting
          )

          # Print R version and library paths for debugging
          cat('R Version:\n')
          print(R.version)
          cat('\nLibrary Paths:\n')
          .libPaths()

          # Attempt robust package installation
          install_robust(packages_to_install)

          # Verify installations with detailed output
          installed_packages <- installed.packages()[,1]
          package_versions <- lapply(packages_to_install, function(pkg) {
            ver <- tryCatch(
              packageVersion(pkg),
              error = function(e) 'Not Installed'
            )
            return(ver)
          })
          names(package_versions) <- packages_to_install

          # Print package installation details
          cat('\nPackage Installation Verification:\n')
          for (pkg in packages_to_install) {
            cat(sprintf('%s: %s\n', pkg, package_versions[[pkg]]))
          }

          # Final check
          missing_packages <- setdiff(packages_to_install, installed_packages)
          if (length(missing_packages) > 0) {
            cat('CRITICAL: Failed to install the following packages:\n')
            cat(missing_packages, sep = '\n')
            quit(status = 1)
          } else {
            cat('\nAll required packages installed successfully!\n')
          }
          "

      - name: Verify R Environment
        run: |
          R -e "
          # Print session information
          sessionInfo()

          # Print available packages
          installed_packages <- installed.packages()[,1]
          print(installed_packages)
          "

      - name: Install Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: prerelease

      - name: Verify Required Files
        run: |
          required_files=(
            "market-weather.qmd"
            "market-weather-functions.R"
            "market-weather-indices.R"
            "market-weather.css"
          )
          
          all_files_exist=true
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              all_files_exist=false
            else
              echo "✅ Found $file"
              file "$file"
            fi
          done
          
          if [ "$all_files_exist" = false ]; then
            exit 1
          fi

      - name: Render Quarto Document
        run: |
          quarto render market-weather.qmd \
            --output-dir _site || {
              echo "Quarto rendering failed"
              exit 1
            }
          
          ls -la _site
          
          if [ -f "_site/market-weather.html" ]; then
            echo "HTML file successfully generated"
            head -n 50 "_site/market-weather.html"
          else
            echo "No HTML file generated"
            exit 1
          fi

      - name: Debug Output
        if: failure()
        run: |
          echo "Installed Packages:"
          R -e "installed.packages()[,1]"
          
          echo "-------------------------"
          echo "System Package Information:"
          dpkg -l | grep -E 'libcurl|libssl|libxml2|libharfbuzz|libfreetype|libpng|pandoc'
